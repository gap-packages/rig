#summary Abelian extensions of some Rig quandles

With Rig one can compute abelian extensions of quandles. Let us compute some
examples.

== Q(4,1) ==

Let us construct the abelian extensions of `SmallQuandle(4,1)`. The 2nd
quandle cohomology group is of abelian type `[ 2 ]`. There is only one non-trivial
2-cocycle, say with values in the group generated by the permutation `(1,2)`. 

There is only one non-trivial abelian extension:
{{{
    gap> r := SmallQuandle(4,1);;
    gap> f := 2ndQuandleCohomologyGenerators(4,1).generators[1];;
    gap> s := AbelianExtension(r, Group(Flat(f)), f);;
    gap> IdQuandle(s);
    [ 8, 1 ]
}}}

== Q(6,1) ==

Let us construct the abelian extensions of `SmallQuandle(6,1)`. 
The 2nd quandle cohomology group is of abelian type `[ 2 ]`. There is only one non-trivial 2-cocycle, say with values in the group generated by the permutation `(1,2)`. We construct Q(12,1) as an abelian extension of Q(6,1):


{
gap> r := SmallQuandle(6,1);
gap> f := 2ndQuandleCohomologyGenerators(6,1).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 12, 1 ]

== Q(6,2) ==

Here we have another example. We construct Q(24,2) as an abelian extension of Q(6,2):

{{{
gap> r := SmallQuandle(6,2);;
gap> f := 2ndQuandleCohomologyGenerators(6,2).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 24, 2 ]
}}}

== Q(9,2) ==

We construct Q(27,1) as an abelian extension:

{{{
gap> r := SmallQuandle(9,2);;
gap> f := 2ndQuandleCohomologyGenerators(9,2).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 27, 1 ]
}}}

== Q(9,3) ==

We construct Q(27,6) as an abelian extension:

{{{
gap> r := SmallQuandle(9,3);;
gap> f := 2ndQuandleCohomologyGenerators(9,3).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 27, 6 ]
}}}

== Q(9,6) ==

We construct Q(27,14) as an abelian extension:

{{{
gap> r := SmallQuandle(9,6);;
gap> f := 2ndQuandleCohomologyGenerators(9,6).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 27, 14 ]
}}}

== Q(12,1) ==

We construct Q(24,1) as an abelian extension:

{{{
gap> r := SmallQuandle(12,1);;
gap> f := 2ndQuandleCohomologyGenerators(12,1).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 24, 1 ]
}}}

== Q(12,2) ==

We construct Q(24,2) as an abelian extension:

{{{
gap> r := SmallQuandle(12,2);;
gap> f := 2ndQuandleCohomologyGenerators(12,2).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 24, 2 ]
}}}

== Q(12,3) ==

We construct an abelian extension of size 120:

{{{
gap> r := SmallQuandle(12,3);;
gap> f := 2ndQuandleCohomologyGenerators(12,3).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
}}}

== Q(12,4) ==

We construct Q(24,8) as an abelian extension:

{{{
gap> r := SmallQuandle(12,4);;
gap> f := 2ndQuandleCohomologyGenerators(12,4).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 24, 8 ]
}}}

== Q(12,5) ==

We construct an abelian extension of size 48:

{{{
gap> r := SmallQuandle(12,5);;
gap> f := 2ndQuandleCohomologyGenerators(12,5).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
}}}

== Q(12,6) ==

We construct an abelian extension of size 48:

{{{
gap> r := SmallQuandle(12,6);;
gap> f := 2ndQuandleCohomologyGenerators(12,6).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
}}}

== Q(12,7) ==

We construct Q(24,15) as an abelian extension:

{{{
gap> r := SmallQuandle(12,7);;
gap> f := 2ndQuandleCohomologyGenerators(12,7).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 24, 15 ]
}}}

We construct an abelian extension of size 48:

{{{
gap> r := SmallQuandle(12,7);;
gap> f := 2ndQuandleCohomologyGenerators(12,7).generators[2];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
}}}

== Q(12,8) ==

We construct Q(24,5) as an abelian extension:

{{{
gap> r := SmallQuandle(12,8);;
gap> f := 2ndQuandleCohomologyGenerators(12,8).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 24, 5 ]
}}}

We construct Q(24,16) as an abelian extension:

{{{
gap> r := SmallQuandle(12,8);;
gap> f := 2ndQuandleCohomologyGenerators(12,8).generators[2];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 24, 16 ]
}}}

We construct Q(24,16) as another abelian extension:

{{{
gap> r := SmallQuandle(12,8);;
gap> f := 2ndQuandleCohomologyGenerators(12,8).generators[3];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 24, 16 ]
}}}

== Q(12,9) ==

We construct an abelian extension of size 48:

{{{
gap> r := SmallQuandle(12,9);;
gap> f := 2ndQuandleCohomologyGenerators(12,9).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
}}}

We construct an abelian extension of size 48:

{{{
gap> r := SmallQuandle(12,9);;
gap> f := 2ndQuandleCohomologyGenerators(12,9).generators[2];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
}}}

== Q(12,10) ==

We construct an abelian extension of size 72:

{{{
gap> r := SmallQuandle(12,10);;
gap> f := 2ndQuandleCohomologyGenerators(12,10).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
}}}

== Q(15,2) ==



{{{
gap> r := SmallQuandle(15,2);;
gap> f := 2ndQuandleCohomologyGenerators(15,2).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 30, 5 ]
}}}

We construct Q(30,1) as an abelian extension:

{{{
gap> r := SmallQuandle(15,2);;
gap> f := 2ndQuandleCohomologyGenerators(15,2).generators[2];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
gap> IdQuandle(s);
[ 30, 1 ]
}}}

== Q(15,5) ==

We construct an abelian extension of size 75:

{{{
gap> r := SmallQuandle(15,5);;
gap> f := 2ndQuandleCohomologyGenerators(15,5).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
}}}

== Q(15,6) ==

We construct an abelian extension of size 75:

{{{
gap> r := SmallQuandle(15,6);;
gap> f := 2ndQuandleCohomologyGenerators(15,6).generators[1];;
gap> s := AbelianExtension(r, Group(Flat(f)), f);;
}}}
