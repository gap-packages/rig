#summary How to...

= Introduction =



= Creating racks and quandles =

Rig provides several functions for creating racks and quandles. For example

* `DihedralRack( n )` returns the dihedral quandle of n elements.
  # Example: The dihedral quandle of 5 elements.
{{{
gap> r := DihedralRack(5);;
gap> Table(r);
[ [  1,  5,  4,  3,  2 ],
  [  3,  2,  1,  5,  4 ],
  [  5,  4,  3,  2,  1 ],
  [  2,  1,  5,  4,  3 ],
  [  4,  3,  2,  1,  5 ] ]
}}}

* `TrivialRack( n )` returns the trivial quandle of n elements.
  # Example: The trivial rack of 3 elements.
{{{
gap> r := TrivialRack(3);;
gap> Table(r);
[ [  1,  2,  3 ],
  [  1,  2,  3 ],
  [  1,  2,  3 ] ]
}}}

* `SmallQuandle( n, i )` returns the quandle `i` of size `n` stored in the small quandles library.  This library includes all non-isomorphic quandles of size <36.
  # Example: The only indecomposable quandle of 4 elements is the rack associated to the vertices of the tetrahedron. 
{{{
gap> NrSmallQuandles(4);                        
1
gap> r := SmallQuandle(4, 1);;
gap> Table(r);
[ [  1,  3,  4,  2 ],
  [  4,  2,  1,  3 ],
  [  2,  4,  3,  1 ],
  [  3,  1,  2,  4 ] ]
}}}

* `Rack( data )` is the generic function to construct racks. 
  # Example: the rack associated to a conjugacy class of a group.
{{{
gap> r := Rack(AlternatingGroup(4), (1,2,3));;
gap> Table(r);
[ [  1,  3,  4,  2 ],
  [  4,  2,  1,  3 ],
  [  2,  4,  3,  1 ],
  [  3,  1,  2,  4 ] ]
}}} 