### Returns the subrack structure generated by <subset>
InstallGlobalFunction("CanonicalSubrack", function(rack, subset)
  local tmp, size, subrack, ij, k, l, i, j;
  tmp := List(subset);
  for i in tmp do
    for j in tmp do
      ij := rack!.matrix[i][j];
      if not ij in tmp then
      	Add(tmp, ij);
      fi;
    od;
  od;
  size := Size(tmp);
  Sort(tmp);
  subrack := NullMat(size, size);
  for i in [1..size] do
    for j in [1..size] do
      subrack[i][j] := rack!.matrix[tmp[i]][tmp[j]]; 
    od;
  od;
  return RackFromAMatrix(ApplyLabels(subrack, tmp)); 
end);

InstallGlobalFunction("SubrackAsSubset",
###  "Returns the subrack generated by <subset>, but only the positions",
###  [IsRack, IsList],
  function(rack, subset)
  local tmp, size, subrack, ij, k, l, i, j;
  tmp := List(subset);
  for i in tmp do
    for j in tmp do
      ij := rack!.matrix[i][j];
      if not ij in tmp then
      	Add(tmp, ij);
      fi;
    od;
  od;
  Sort(tmp);
  return tmp;
end);

### This code computes all subracks, not checking isomorphisms
### Returns all subracks of size less than <n> which contain the second arg

InstallGlobalFunction("SubracksGeneratedBy", function(r,n)
##"Returns all subracks generated by <n> elements",
##[IsRack, IsInt],
##function(r,n)
	local s,g,sr,subracks;
	subracks := Set([]);
	s := Size(r);
	for g in Combinations([1..s],n) do
		sr := SubrackAsSubset(r,g);
		if Size(sr)<s then
			Add(subracks,sr);
		fi;
	od;
	return subracks;
end);

InstallGlobalFunction("SubracksGeneratedByUpToIso", function(r,n)
##"Returns all subracks generated by <n> elements up to isomorphism",
#[IsRack, IsInt],
#function(r,n)
	local sr,subracks,s,t,i,j,m;
	subracks := SubracksGeneratedBy(r,n);
	sr := Set([]);
	for t in subracks do
		s := Size(t);
		m := NullMat(s, s);
		for i in [1..s] do
			for j in [1..s] do
				m[i][j] := r!.matrix[t[i]][t[j]]; 
			od;
		od;
		#Add(sr, Rack(TranslateRack(m,t)));
		Add(sr, RackFromAMatrix(ApplyLabels(m,t)));
	od;
	subracks := Set([]);
	for t in sr do
		i := 1;
		for s in subracks do
			j := IsomorphismRacks(s,t);
			if not (j=false or j=fail) then
				i := 0;
				break;
			fi;
		od;
		if i=1 then
			Add(subracks,t);
			#Print("New subrack: ",r!.matrix[1],"\n");
		fi;
	od;
	return subracks;
end);
InstallGlobalFunction("SubracksGeneratedFrom",
#"Returns all subracks generated by <n> elements containing <l>",
#[IsRack, IsList, IsInt],
function(r,l,n)
	local s,g,sr,subracks;
	subracks := Set([]);
	s := Size(r);
	for g in Combinations(Difference([1..s],l),n-Size(l)) do
		sr := SubrackAsSubset(r,Union(g,l));
		if Size(sr)<s then
			Add(subracks,sr);
		fi;
	od;
	return subracks;
end);

InstallGlobalFunction("SubracksGeneratedFromUpToIso",
#"Returns all subracks generated by <n> elements containing <l> up to isomorphism",
#[IsRack, IsList, IsInt],
function(r,l,n)
	local sr,subracks,s,t,i,j,m;
	subracks := SubracksGeneratedFrom(r,l,n);
	sr := Set([]);
	for t in subracks do
		s := Size(t);
		m := NullMat(s, s);
		for i in [1..s] do
			for j in [1..s] do
				m[i][j] := r!.matrix[t[i]][t[j]]; 
			od;
		od;
		Add(sr, RackFromAMatrix(ApplyLabels(m,t)));
	od;
	subracks := Set([]);
	for t in sr do
		i := 1;
		for s in subracks do
			j := IsomorphismRacks(s,t);
			if not (j=false or j=fail) then
				i := 0;
				break;
			fi;
		od;
		if i=1 then
			Add(subracks,t);
			#Print("New subrack: ",r!.matrix[1],"\n");
		fi;
	od;
	return subracks;
end);

### This code calls Subracks and then cleans isomorphic subracks
InstallGlobalFunction("SubracksUpToIso",
#"Returns all subracks of size less than <n> up to isomorphism",
#[IsRack, IsList, IsInt],
function(rack, subr, n)
  local subracks, subracksstr, r, i, j, m, s, tmp, x;
  subracks := Subracks(rack, subr, n);
  subracksstr := Set([]);
  for r in subracks do
    s := Size(r);
    m := NullMat(s, s);
    for i in [1..s] do
      for j in [1..s] do
	m[i][j] := rack!.matrix[r[i]][r[j]]; 
      od;
    od;
    tmp := RackFromAMatrix(ApplyLabels(m,r));
    tmp.labels := List(r, x->rack.labels[x]);
    Add(subracksstr, tmp);
    ##Add(subracksstr, Rack(ApplyLabels(m,r)));
    ##Add(subracksstr, Rack(TranslateRack(m,r)));
  od;
  subracks := Set([]);
  for r in subracksstr do
    i := 1;
    for s in subracks do
      j := IsomorphismRacks(s,r);
      if not (j=false or j=fail) then
	i := 0;
	break;
      fi;
    od;
    if i=1 then
      Add(subracks, r);
  #Print("New subrack: ",r!.matrix[1],"\n");
    fi;
  od;
  return subracks;
end);

## Subracks with no seed
## Returns all subracks of size less than <n> containing [1]

InstallGlobalFunction("Subracks", function(arg)
  local rack, subr, n, tmp, subracks, newrack, r, j;

  rack := arg[1];
  if IsBound(arg[3]) then
    subr := arg[2];
    n := arg[3];
  else
    subr := [1];
    n := arg[2];
  fi;
  
  tmp := rack!.matrix[1];
  subracks := Set([subr]);
  for r in subracks do
    for j in tmp do
      if (not j in r) and Size(r) < n then
	newrack := SubrackAsSubset(rack, Union(r, [j]));
	#Print("  El rack generado es ",newrack,"\n");
	if (Length(newrack) <= n) and (not newrack in subracks) then
	  Add(subracks, newrack);
	fi;
      fi;
    od;
  od;
  return subracks;
end);


